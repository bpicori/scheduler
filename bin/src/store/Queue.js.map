{"version":3,"file":"Queue.js","sourceRoot":"","sources":["../../../src/store/Queue.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAEH,MAAa,KAAK;IAIhB,YAAY,OAAe;QAFnB,YAAO,GAAG,CAAC,CAAC;QAGlB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,OAAO,CAAC,OAAY;QACzB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,IAAI;QACT,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAChC,CAAC;IAED;;OAEG;IACI,MAAM;QACX,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,IAAI,CAAC,OAAO,CAAC;IAChD,CAAC;IAEM,CAAC,MAAM,CAAC,QAAQ,CAAC;QACtB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,IAAI,CAAC,KAAW;QACrB,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACxC,OAAO;gBACL,IAAI,EAAE,KAAK;gBACX,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;aACtC,CAAC;SACH;aAAM;YACL,OAAO;gBACL,IAAI,EAAE,IAAI;gBACV,aAAa;gBACb,KAAK,EAAE,IAAI;aACZ,CAAC;SACH;IACH,CAAC;CAEF;AA/DD,sBA+DC","sourcesContent":["/**\n * Created by bpicori on 19-02-05\n */\n\nexport class Queue implements IterableIterator<any> {\n  private readonly dataStore: any[];\n  private pointer = 0;\n  private readonly maxSize: number;\n  constructor(maxSize: number) {\n    this.dataStore = [];\n    this.maxSize = maxSize;\n  }\n\n  /**\n   * Adds element to queue\n   */\n  public enqueue(element: any) {\n    this.dataStore.push(element);\n  }\n\n  /**\n   * Removes command from the queue\n   */\n  public dequeue() {\n    this.dataStore.shift();\n  }\n\n  /**\n   * Get the first element of the queue\n   */\n  public peek() {\n    return this.dataStore[0];\n  }\n\n  /**\n   * Check queue is empty\n   */\n  public isEmpty() {\n    return !this.dataStore.length;\n  }\n\n  /**\n   * Check queue is full\n   */\n  public isFull() {\n    return this.dataStore.length === this.maxSize;\n  }\n\n  public [Symbol.iterator](): IterableIterator<any> {\n    return this;\n  }\n\n  public next(value?: any): IteratorResult<any> {\n    if (this.pointer < this.dataStore.length) {\n      return {\n        done: false,\n        value: this.dataStore[this.pointer++],\n      };\n    } else {\n      return {\n        done: true,\n        // @ts-ignore\n        value: null,\n      };\n    }\n  }\n\n}\n"]}