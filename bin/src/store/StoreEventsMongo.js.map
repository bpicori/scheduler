{"version":3,"file":"StoreEventsMongo.js","sourceRoot":"","sources":["../../../src/store/StoreEventsMongo.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport {Db, MongoClient} from 'mongodb';\nimport { Event, IEvent } from '../event/Event';\nimport {IStore} from './IStore';\nimport {Queue} from './Queue';\n\nexport class StoreEventsMongo extends EventEmitter implements IStore {\n  private readonly client: MongoClient;\n  private readonly dbName: string;\n  private db: Db | null;\n  private commandQueue: Queue;\n  constructor(configs: IConfigs) {\n    super();\n    this.client = new MongoClient(configs.mongoUrl, { useNewUrlParser: true, poolSize: 10, reconnectTries: Number.MAX_VALUE, reconnectInterval: 1000 });\n    this.dbName = configs.dbName;\n    this.db = null;\n    this.on('addEvent', this.addEvent);\n    this.on('updateEvent', this.updateEvent);\n    this.on('deleteEvent', this.deleteEvent);\n    this.commandQueue = new Queue(Number.MAX_VALUE);\n  }\n\n  /**\n   * Find all events\n   */\n  public async getAllEvents(): Promise<any> {\n    if (this.db && this.client.isConnected()) {\n      return this.db.collection('events').find({}).toArray();\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Add Event\n   * @param event\n   */\n  public async addEvent(event: IEvent): Promise<any> {\n    if (this.db && this.client.isConnected()) {\n      await this.db.collection('events').insertOne(Event.serialize(event));\n    } else {\n      this.commandQueue.enqueue({ command: 'addEvent', event });\n    }\n  }\n\n  /**\n   * Update Event\n   * @param event\n   */\n  public async deleteEvent(event: IEvent): Promise<any> {\n    if (this.db && this.client.isConnected()) {\n      await this.db.collection('events').deleteOne({ eventId: event.eventId });\n    } else {\n      this.commandQueue.enqueue({ command: 'deleteEvent', event });\n    }\n  }\n\n  /**\n   * Update Event\n   * @param event\n   */\n  public async updateEvent(event: IEvent): Promise<any> {\n    if (this.db && this.client.isConnected()) {\n      await this.db.collection('events').findOneAndUpdate({eventId: event.eventId},  {$set: Event.serialize(event)});\n    } else {\n      this.commandQueue.enqueue({ command: 'updateEvent', event });\n    }\n  }\n\n  public async connect(): Promise<Db|null> {\n\n    try {\n      await this.client.connect();\n      this.db = this.client.db(this.dbName);\n      this.db.on('reconnect', () => {\n        console.log('Mongodb Connected');\n      });\n      this.db.on('close', () => {\n        console.warn('Mongodb Disconnected');\n      });\n      return this.db;\n    } catch (err) {\n      await this._delay(1000);\n      return this.connect();\n    }\n  }\n\n  private _delay<T>(millis: number): Promise<any> {\n    return new Promise((resolve) => setTimeout(resolve(), millis));\n  }\n}\n// TODO\ninterface IConfigs {\n  mongoUrl: string;\n  dbName: string;\n}\n"]}