{"version":3,"file":"EventManager.js","sourceRoot":"","sources":["../../../src/event/EventManager.ts"],"names":[],"mappings":"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","sourcesContent":["import {EventEmitter} from 'events';\nimport {clearInterval} from 'timers';\nimport {StoreEventsMongo} from '../store/StoreEventsMongo';\nimport {Event, IEvent, StatusEvent} from './Event';\n\nexport default class EventManager extends EventEmitter {\n  private _byId: Map<string, IEvent>;\n  private _byTimestamp: Map<number, Map<string, IEvent>>;\n\n  private interval: any;\n  private _eventStore: StoreEventsMongo;\n\n  /**\n   * Constructor\n   * @param eventStore\n   */\n  constructor(eventStore: StoreEventsMongo) {\n    super();\n    this._eventStore = eventStore;\n    this._byId = new Map();\n    this._byTimestamp = new Map();\n    this.on('execute', this._onExecute);\n  }\n\n  get byId(): Map<string, IEvent> {\n    return this._byId;\n  }\n\n  /**\n   * Get All events\n   */\n  public getEvents(): IEvent[] {\n    return Array.from(this._byId.values());\n  }\n\n  /**\n   * Get Event by id\n   * @param eventId\n   */\n  public getEventById(eventId: string): IEvent {\n    if (!this._byId.has(eventId)) {\n      throw new Error('Event not Found');\n    }\n    return this._byId.get(eventId) as IEvent;\n  }\n\n  /**\n   * Add event\n   * @param event\n   * @param emitToStore\n   */\n  public addEvent(event: IEvent, emitToStore = true): IEvent {\n    // if event is repeat\n    if (event.repeat && event.interval) {\n      const now = Math.round(Date.now() / 1000);\n      event.timestamp = now + event.interval;\n    }\n    this._byId.set(event.eventId, event);\n    // if in this timestamp has other events\n    if (this._byTimestamp.has(event.timestamp)) {\n      const timestampMap = this._byTimestamp.get(event.timestamp) as Map<string, IEvent>;\n      timestampMap.set(event.eventId, event);\n    } else {\n      this._byTimestamp.set(event.timestamp, new Map([[event.eventId, event]]));\n    }\n    if (emitToStore) {\n      this._eventStore.emit('addEvent', event);\n    }\n    return event;\n  }\n\n  /**\n   * Update event\n   * @param event\n   * @param emitToStore\n   */\n  public updateEvent(event: IEvent, emitToStore = true): IEvent {\n    if (!this._byId.has(event.eventId)) {\n      throw new Error('Event doesn\\'t exist');\n    }\n    // check if event is repeat\n    if (event.repeat && event.interval) {\n      const now = Math.round(Date.now() / 1000);\n      event.timestamp = now + event.interval;\n    }\n    this._byId.set(event.eventId, event);\n    if (this._byTimestamp.has(event.timestamp)) {\n      const timestampMap = this._byTimestamp.get(event.timestamp) as Map<string, IEvent>;\n      timestampMap.set(event.eventId, event);\n    } else {\n      this._byTimestamp.set(event.timestamp, new Map([[event.eventId, event]]));\n    }\n    if (emitToStore) {\n      this._eventStore.emit('updateEvent', event);\n    }\n    return event;\n  }\n\n  /**\n   * Delete event\n   * @param event\n   * @param emitToStore\n   */\n  public deleteEvent(event: IEvent, emitToStore = true): boolean {\n    if (!this._byId.has(event.eventId)) {\n      throw new Error('Event not Found');\n    }\n    this._byId.delete(event.eventId);\n    const timestampMap = this._byTimestamp.get(event.timestamp) as Map<string, IEvent>;\n    timestampMap.delete(event.eventId);\n    // if timestamp map is empty\n    if (!timestampMap.size) {\n      this._byTimestamp.delete(event.timestamp);\n    }\n    if (emitToStore) {\n      this._eventStore.emit('deleteEvent');\n    }\n    return true;\n  }\n\n  /**\n   * Empty scheduler\n   */\n  public empty(): void {\n    this._byId = new Map<string, Event>();\n    this._byTimestamp = new Map<number, Map<string, IEvent>>();\n  }\n\n  /**\n   * Sync events with eventStore\n   */\n  public async sync() {\n    await this._eventStore.connect();\n    const events = await this._eventStore.getAllEvents();\n    const now = Math.round(Date.now() / 1000);\n    for (const event of events) {\n      if (event.repeat) {\n        event.timestamp = now + event.interval;\n      }\n      this.addEvent(Event.deserialize(event), false);\n    }\n  }\n\n  /**\n   * Start Event Manager\n   */\n  public async start() {\n    this.interval = setInterval(this._interval.bind(this), 1000);\n  }\n\n  /**\n   * Stop EventManager\n   */\n  public stop() {\n    clearInterval(this.interval);\n  }\n\n  /**\n   * Interval every seconds and check if there is an event to emit\n   * @private\n   */\n  private _interval(): void {\n    const now = Math.round(Date.now() / 1000);\n    // if has event\n    if (this._byTimestamp.has(now)) {\n      for (const [id, event] of this._byTimestamp.get(now) as Map<string, IEvent>) {\n        this.emit('execute', event);\n        // if event is repeat\n        if (event.repeat && event.interval) {\n          event.timestamp = now + event.interval;\n          this.updateEvent(event, false);\n        }\n      }\n      this._byTimestamp.delete(now);\n    }\n  }\n  private async _onExecute(event: IEvent) {\n    console.log(`Fired event: ${event.name}`);\n    await event.transport.publish();\n  }\n}\n"]}