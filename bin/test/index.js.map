{"version":3,"file":"index.js","sourceRoot":"","sources":["../../test/index.ts"],"names":[],"mappings":";;;;;AACA,iBAAe;AAEf,6EAAqD;AACrD,oEAA+D;AAE/D,MAAM,KAAK,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;AAEnH,SAAS,oBAAoB,CAAC,cAAsB,EAAE,SAAuB;IACzE,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,cAAc,EAAE,CAAC,EAAE,EAAE;QACtC,8EAA8E;KACjF;AACL,CAAC;AAED,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAChC,MAAM,KAAK,GAAG,IAAI,mCAAgB,CAAC,EAAE,QAAQ,EAAE,2BAA2B,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;IAChG,MAAM,SAAS,GAAG,IAAI,sBAAY,CAAC,KAAK,CAAC,CAAC;IAC1C,UAAU,CAAC,KAAK,IAAI,EAAE;QAClB,SAAS,CAAC,KAAK,EAAE,CAAC;QAClB,SAAS,CAAC,IAAI,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IACH,SAAS,CAAC,KAAK,IAAI,EAAE;QACjB,SAAS,CAAC,KAAK,EAAE,CAAC;QAClB,SAAS,CAAC,IAAI,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IACH,6DAA6D;IAC7D,sEAAsE;IACtE,+BAA+B;IAC/B,0DAA0D;IAC1D,iDAAiD;IACjD,MAAM;IACN,oCAAoC;IACpC,iBAAiB;IACjB,sEAAsE;IACtE,+BAA+B;IAC/B,6BAA6B;IAC7B,kCAAkC;IAClC,gEAAgE;IAChE,iCAAiC;IACjC,iDAAiD;IACjD,4CAA4C;IAC5C,0CAA0C;IAC1C,gCAAgC;IAChC,MAAM;IACN,uCAAuC;IACvC,uEAAuE;IACvE,wEAAwE;IACxE,gCAAgC;IAChC,gCAAgC;IAChC,mCAAmC;IACnC,+CAA+C;IAC/C,0DAA0D;IAC1D,wEAAwE;IACxE,MAAM;IACN,6CAA6C;IAC7C,0BAA0B;IAC1B,gCAAgC;IAChC,+BAA+B;IAC/B,qDAAqD;IACrD,8FAA8F;IAC9F,yBAAyB;IACzB,oDAAoD;IACpD,gBAAgB;IAChB,2CAA2C;IAC3C,MAAM;IACN,2CAA2C;IAC3C,6BAA6B;IAC7B,mDAAmD;IACnD,4CAA4C;IAC5C,iDAAiD;IACjD,MAAM;IACN,oCAAoC;IACpC,6BAA6B;IAC7B,mDAAmD;IACnD,yBAAyB;IACzB,uDAAuD;IACvD,MAAM;AACV,CAAC,CAAC,CAAC","sourcesContent":["import { assert} from 'chai';\nimport 'mocha';\nimport {Event} from '../src/event/Event';\nimport EventManager from '../src/event/EventManager';\nimport {StoreEventsMongo} from '../src/store/StoreEventsMongo';\nimport {Http} from '../src/transport/Http';\nconst delay = (time: number) => (result: any) => new Promise((resolve) => setTimeout(() => resolve(result), time));\n\nfunction generateRandomEvents(numberOfEvents: number, scheduler: EventManager): void {\n    const now = Math.round(Date.now() / 1000);\n    for (let i = 1; i <= numberOfEvents; i++) {\n        // scheduler.addEvent(new Event(`event${i}`, now + i, false, 0,  new Http()));\n    }\n}\n\ndescribe('Event Manager Test', () => {\n    const store = new StoreEventsMongo({ mongoUrl: 'mongodb://localhost:27017', dbName: 'events' });\n    const scheduler = new EventManager(store);\n    beforeEach(async () => {\n        scheduler.empty();\n        scheduler.stop();\n    });\n    afterEach(async () => {\n        scheduler.empty();\n        scheduler.stop();\n    });\n    // it('should add event and returns an Event object', () => {\n    //   const event = new Event('event1',  1234, false, 0,  new Http() );\n    //   scheduler.addEvent(event);\n    //   const event2 = scheduler.getEventById(event.eventId);\n    //   assert.equal(event.eventId, event2.eventId);\n    // });\n    // it('should update event', () => {\n    //   // Add event\n    //   const event = new Event('event1',  1234, false, 0,  new Http() );\n    //   scheduler.addEvent(event);\n    //   event.timestamp = 12345;\n    //   scheduler.updateEvent(event);\n    //   const updatedEvent = scheduler.getEventById(event.eventId);\n    //   // timestamp should be 12345\n    //   assert.equal(updatedEvent.timestamp, 12345);\n    //   // scheduler should have only one array\n    //   const events = scheduler.getEvents();\n    //   assert.lengthOf(events, 1);\n    // });\n    // it('should delete an event', () => {\n    //   const event1 = new Event('event1',  1234, false, 0,  new Http() );\n    //   const event2 = new Event('event1',  12345, false, 0,  new Http() );\n    //   scheduler.addEvent(event1);\n    //   scheduler.addEvent(event2);\n    //   scheduler.deleteEvent(event1);\n    //   assert.lengthOf(scheduler.getEvents(), 1);\n    //   // assert.isUndefined(scheduler.byId.get(event1.id));\n    //   // assert.isUndefined(scheduler.byTimestamp.get(event1.timestamp));\n    // });\n    // it('should fire event', async function() {\n    //     this.timeout(5000);\n    //     const spyExecute = spy();\n    //     await scheduler.start();\n    //     const now = Math.round(Date.now() / 1000) + 2;\n    //     scheduler.addEvent(new Event({name: 'event1', timestamp: now, transport: new Http()}));\n    //     setTimeout(() => {\n    //         expect(spyExecute.called).to.equal(true);\n    //     }, 3000);\n    //     scheduler.on('execute', spyExecute);\n    // });\n    // it(\"check event storage length\", () => {\n    //     const nrOfEvents = 10;\n    //     generateRandomEvents(nrOfEvents, scheduler);\n    //     const events = scheduler.getEvents();\n    //     expect(events).to.have.length(nrOfEvents);\n    // });\n    // it(\"should empty events\", () => {\n    //     const nrOfEvents = 10;\n    //     generateRandomEvents(nrOfEvents, scheduler);\n    //     scheduler.empty();\n    //     expect(scheduler.getEvents()).to.have.length(0);\n    // });\n});\n"]}